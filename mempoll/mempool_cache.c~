#include <linux/module.h>
#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/slab.h>
#include <linux/mempool.h>

static mempool_t *mempoolp;	//定义一个内存池
struct data			//定义一个内存池管理对象（data结构体）
{
	char *name;
	int value;
	int nr;		//保存当前对象在elements数组中的索引值

}*datap;

//内存池alloc函数
void *mempool_alloc_fun(gfp_t gfp_mask, void *pool_data)
{

	if (!mempoolp)				//判断是否是create函数调用的alloc，此时需要创建新的对象
	{
		pool_data = kmalloc(sizeof(struct data), GFP_KERNEL);	//为data结构体分配内存空间

		printk("alloc struct data\n");
	}
	else					//mempoolp指针不为NULL，则为mempoll_alloc函数调用，需要从elements数组获取对象
	{
		if (mempoolp->curr_nr < mempoolp->min_nr) 
		{	
			void *element = mempoolp->elements[mempoolp->curr_nr];	//从elements数组获取一个element
			if (element)
			{
				((struct data*) element)->nr = mempoolp->curr_nr;	//用当前的curr_nr设置data.nr
				mempoolp->elements[mempoolp->curr_nr--] = NULL;		//将elements数组当前的值设为NULL，以避免被重复使用
			}
			return element;
		}
		else
		{
			return NULL;
		}
	}

	return pool_data;
}

//内存池free函数
void mempool_free_fun(void *element, void *pool_data)
{
	//释放element指向的内存空间
	if (element)
	{
		kfree(element);
		printk("free struct data\n");
	}
}
static int __init demo_init(void)
{
	//创建内存池，内存池可存储5个对象（elements数组长度为5）
	//没有与内存池相关的数据，故最后一个参数为NULL
	//执行mempool_create之后会调用5次alloc函数
	mempoolp = mempool_create(5, mempool_alloc_fun, mempool_free_fun, NULL);
	mempoolp->curr_nr = mempoolp->curr_nr - 1;				//将curr_nr指向elements的最后一个元素

	datap = mempool_alloc(mempoolp, GFP_KERNEL);				//从内存池获取对象
	datap->name = "mempool data";
	datap->value = 4321;

	printk(KERN_ALERT "demo_init.\n");
	return 0;
}

static void __exit demo_exit(void)
{
	if (datap)
	{
		printk("data.name=%s\n", datap->name);
		printk("data.value=%d\n", datap->value);
		if (mempoolp && datap)
		{
			mempoolp->curr_nr = datap->nr;
			mempool_free(datap, mempoolp);
			mempoolp->curr_nr = mempoolp->min_nr;
			mempool_destroy(mempoolp);
		}

	}
	printk(KERN_ALERT "demo_exit.\n");
}
MODULE_LICENSE("GPL");
module_init(demo_init);
module_exit(demo_exit);
